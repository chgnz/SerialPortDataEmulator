using System;
using System.IO.Ports;
using System.Linq;

namespace SerialPortDataEmulatorConsole.SerialProtocols
{
    class SiemensVDOEmulator : ISerialEmulator
    {
        // Msg to send
        private readonly byte[][] VDO_MSG = new byte[][] {
            new byte[] {0x55, 0x44, 0x54, 0x43, 0x4f, 0x00, 0x60, 0x02, 0x0c, 0x04, 0x1b, 0x23, 0x7d, 0x80, 0x09, 0x10, 0xc0, 0xc1, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x40, 0x1f, 0x00, 0x00, 0x50, 0x04, 0x11, 0x58, 0x58, 0x58, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0e, 0x01, 0x58, 0x58, 0x58, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x12, 0x01, 0x20, 0x4c, 0x56, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x36, 0x31, 0x37, 0x30, 0x30, 0x30, 0x12, 0x04, 0x20, 0x4c, 0x56, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x32, 0x32, 0x36, 0x35, 0x32, 0x30, 0x30, 0xe9 },
            new byte[] {0x55, 0x44, 0x54, 0x43, 0x4f, 0x00, 0x64, 0x02, 0x0c, 0x04, 0x1b, 0x23, 0x7d, 0x80, 0x09, 0x10, 0xc0, 0xc1, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x40, 0x1f, 0x00, 0x00, 0x50, 0x04, 0x11, 0x58, 0x58, 0x58, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0e, 0x01, 0x58, 0x58, 0x58, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x12, 0x01, 0x20, 0x4c, 0x56, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x36, 0x31, 0x37, 0x30, 0x30, 0x30, 0x12, 0x04, 0x20, 0x4c, 0x56, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x32, 0x32, 0x36, 0x35, 0x32, 0x30, 0x30, 0xed },
            new byte[] {0x55, 0x44, 0x54, 0x43, 0x4f, 0x00, 0x68, 0x02, 0x0c, 0x04, 0x1b, 0x23, 0x7d, 0x80, 0x09, 0x10, 0xc0, 0xc1, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x40, 0x1f, 0x00, 0x00, 0x50, 0x04, 0x11, 0x58, 0x58, 0x58, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0e, 0x01, 0x58, 0x58, 0x58, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x12, 0x01, 0x20, 0x4c, 0x56, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x36, 0x31, 0x37, 0x30, 0x30, 0x30, 0x12, 0x04, 0x20, 0x4c, 0x56, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x32, 0x32, 0x36, 0x35, 0x32, 0x30, 0x30, 0xe1 },
            new byte[] {0x55, 0x44, 0x54, 0x43, 0x4f, 0x00, 0xec, 0x2c, 0x0b, 0x04, 0x1a, 0x23, 0x7d, 0x80, 0x09, 0x10, 0xc0, 0xc0, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x40, 0x1f, 0x00, 0x00, 0x50, 0x01, 0x11, 0x58, 0x58, 0x58, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0e, 0x01, 0x58, 0x58, 0x58, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x12, 0x01, 0x20, 0x4c, 0x56, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x36, 0x31, 0x37, 0x30, 0x30, 0x30, 0x00, 0x65 },
            new byte[] {0x55, 0x44, 0x54, 0x43, 0x4f, 0x00, 0x54, 0x02, 0x0c, 0x04, 0x1b, 0x23, 0x7d, 0x80, 0x09, 0x10, 0xc0, 0xc1, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x40, 0x1f, 0x00, 0x00, 0x50, 0x04, 0x11, 0x58, 0x58, 0x58, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0e, 0x01, 0x58, 0x58, 0x58, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x12, 0x01, 0x20, 0x4c, 0x56, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x36, 0x31, 0x37, 0x30, 0x30, 0x30, 0x12, 0x04, 0x20, 0x4c, 0x56, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x32, 0x32, 0x36, 0x35, 0x32, 0x30, 0x30, 0xdd }
         };

        // interval settings
        private UInt32 TxInterval;
        private SerialPort Port;

        // private vars
        private long Timestamp;
        private uint VdoMsgIndex;

        public void Init(SerialPort port)
        {
            this.Port = port;
            this.Port.StopBits = StopBits.One;
            this.Port.BaudRate = GetBaudrate();
            this.TxInterval = GetTxInterval();

            this.Port.Open();

            Console.WriteLine($"VDO D8 Emulator Initialized. {port.PortName}, Baudrate: {GetBaudrate()}, Tx interval: {GetTxInterval()} ms");

            Timestamp = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds();
        }

        public void Trigger()
        {
            if (this.TxInterval == 0 ||
                GetTimestamp() - this.Timestamp < this.TxInterval)
            {
                // nav pienācies laiks sūtīt
                return;
            }

            this.Send();

            this.Timestamp = GetTimestamp();
        }

        bool Send()
        {
            if (!Port.IsOpen)
            {
                return false;
            }
            Console.WriteLine($"VDO D8 Emulator Send: {BitConverter.ToString(VDO_MSG[VdoMsgIndex]).Replace("-","")}");

            Port.Write(VDO_MSG[VdoMsgIndex], 0, VDO_MSG[VdoMsgIndex].Length);
            VdoMsgIndex++;
            VdoMsgIndex = (uint)(VdoMsgIndex % VDO_MSG.Count());

            return true;
        }

        private long GetTimestamp()
        {
            return new DateTimeOffset(DateTime.UtcNow).ToUnixTimeMilliseconds();
        }

        private int GetBaudrate()
        {
            return 10400;
        }

        private UInt32 GetTxInterval()
        {
            return 1000;
        }

        public string GetMenuString()
        {
            return "Siemens VDO (automatically transmits VDO data each 1000ms @ baudrate 10400)";
        }

        public void DeInit()
        {
            this.Port.Close();
        }
    }
}
