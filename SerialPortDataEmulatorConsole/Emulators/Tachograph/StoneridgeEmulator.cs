using System;
using System.IO.Ports;
using System.Linq;

namespace SerialPortDataEmulatorConsole.SerialProtocols
{
    class StoneridgeEmulator : ISerialEmulator
    {
        // Msg to send
        private readonly byte[][] SRE_MSG = new byte[][] {
            new byte[] { 0xff, 0xff, 0xff, 0x2d, 0x08, 0x5e, 0x85, 0xbf, 0xef, 0x00, 0x10, 0x00, 0xc1, 0xff, 0x00, 0x05, 0xde, 0xda, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xcf, 0x00, 0x00, 0x5a, 0x00, 0xd5, 0x01, 0x41, 0x50, 0x35, 0x38, 0x39, 0x39, 0x34, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x44, 0x4b, 0x20, 0xca },
            new byte[] { 0xff, 0xff, 0xff, 0x2e, 0x01, 0x5e, 0x85, 0xbf, 0xf0, 0x00, 0x10, 0x00, 0xc1, 0xff, 0x00, 0x05, 0xde, 0xda, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xcf, 0x00, 0x00, 0x5a, 0x00, 0xd5, 0x5a, 0x43, 0x46, 0x41, 0x31, 0x45, 0x4a, 0x30, 0x33, 0x30, 0x32, 0x35, 0x32, 0x39, 0x31, 0x36, 0x34, 0x2a, 0xd5 },
            new byte[] { 0xff, 0xff, 0xff, 0x30, 0x02, 0x5e, 0x85, 0xbf, 0xf0, 0x00, 0x10, 0x00, 0xc1, 0xff, 0x00, 0x05, 0xde, 0xda, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xcf, 0x00, 0x00, 0x5a, 0x00, 0xd5, 0x4c, 0x56, 0x20, 0x4c, 0x56, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x36, 0x31, 0x37, 0x30, 0x30, 0x30, 0x2a, 0x9d },
            new byte[] { 0xff, 0xff, 0xff, 0x30, 0x04, 0x5e, 0x85, 0xbf, 0xf1, 0x00, 0x10, 0x00, 0xc1, 0xff, 0x00, 0x05, 0xde, 0xda, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xcf, 0x00, 0x00, 0x5a, 0x00, 0xd5, 0x4c, 0x56, 0x20, 0x4c, 0x56, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x32, 0x32, 0x36, 0x35, 0x32, 0x30, 0x30, 0x2a, 0x95 },
        };

        // interval settings
        private UInt32 TxInterval;
        private SerialPort Port;

        // private vars
        private long Timestamp;
        private uint SreMsgIndex;

        public void Init(SerialPort port)
        {
            this.Port = port;
            this.Port.StopBits = StopBits.Two;

            this.Port.BaudRate = GetBaudrate();
            this.TxInterval = GetTxInterval();

            this.Port.Open();

            Console.WriteLine($"SRE D8 Emulator Initialized. {port.PortName}, Baudrate: {GetBaudrate()}, Tx interval: {GetTxInterval()} ms");

            Timestamp = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds();
        }

        public void Trigger()
        {
            if (this.TxInterval == 0 ||
                GetTimestamp() - this.Timestamp < this.TxInterval)
            {
                // nav pienācies laiks sūtīt
                return;
            }

            this.Send();

            this.Timestamp = GetTimestamp();
        }

        bool Send()
        {
            if (!Port.IsOpen)
            {
                return false;
            }
            Console.WriteLine($"SRE D8 Emulator Send: {BitConverter.ToString(SRE_MSG[SreMsgIndex]).Replace("-", "")}");

            Port.Write(SRE_MSG[SreMsgIndex], 0, SRE_MSG[SreMsgIndex].Length);
            SreMsgIndex++;
            SreMsgIndex = (uint)(SreMsgIndex % SRE_MSG.Count());

            return true;
        }

        private long GetTimestamp()
        {
            return new DateTimeOffset(DateTime.UtcNow).ToUnixTimeMilliseconds();
        }

        private int GetBaudrate()
        {
            return 1200;
        }

        private UInt32 GetTxInterval()
        {
            return 500;
        }

        public string GetMenuString()
        {
            return "Stoneridge SRE(automatically transmits SRE data each 500ms @ baudrate 1200)";
        }
    }

}
